The reason we choose this implementation as the foundation of this new assignment over another is that in this design every parts of the project is more clear and single-responsibility.
In this case, it is easier to extend the project for the new requirement. For the new kinds of cells we just need to extend the Class UnitPlace and Class Market. And for the new required round-based game, we can preserve all movement like Equip, Move, Attack and Cast. To satisfy the new requirement we only need to add two new movement: Teleport and Back. 
We use some code from another implementation such as the inputChecker class for it reuse the code in a neat way. Also we use the logic in the round class for the new game because it fit the new requirement better which is different heroes moving respectively.
To summarize, choosing this hybrid implementation really helps us reuse the code modules of previous project. What's more, if there are any further new requirements, this implementation is better to extend because of its single-responsibility principle and strategy pattern.  